<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Golang | IT Quicktasks</title>
    <link>https://ismael.casimpan.com/quicktasks-golang/tags/golang/</link>
    <description>Recent content in golang on Golang | IT Quicktasks</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 17 Jan 2022 13:01:11 +0800</lastBuildDate><atom:link href="https://ismael.casimpan.com/quicktasks-golang/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Simple OOP Example</title>
      <link>https://ismael.casimpan.com/quicktasks-golang/simple-oop-example/</link>
      <pubDate>Mon, 17 Jan 2022 13:01:11 +0800</pubDate>
      
      <guid>https://ismael.casimpan.com/quicktasks-golang/simple-oop-example/</guid>
      <description>*** draft ***
Simple OOP example and how it&amp;rsquo;s done in Go adapted with some changes from GoLangBot.
In the root directory where you keep your golang code (e.g. ~/documents/golang), I assume you are already using the golang init script.
Directory layout is like the following as well.
├── documents/ │ └── golang/ │ └── init.sh  Then, within ~/documents/golang,
~$ mkdir oop ~$ cd oop ~$ git init module oop  Directory structure now as follows:</description>
    </item>
    
    <item>
      <title>Suggested Init Script Before Coding in Golang</title>
      <link>https://ismael.casimpan.com/quicktasks-golang/suggested-init-script-before-coding-in-golang/</link>
      <pubDate>Fri, 05 Nov 2021 23:05:11 +0800</pubDate>
      
      <guid>https://ismael.casimpan.com/quicktasks-golang/suggested-init-script-before-coding-in-golang/</guid>
      <description>The very basic variable you need to lookout for in go is the environment variable $GOPATH. In Unix/Linux-based systems it is by default in ~/go. My preference is to put it in a directory where my go code exists. So here&amp;rsquo;s a short shell script I use:
#!/bin/bash if [[ -z $GOPATH ]]; then export GOPATH=$(pwd) export PATH=$GOPATH/bin:$PATH echo &#39;--------------------------------------------------------&#39; echo &#39;GoLang environment now defined!&#39; echo &amp;quot; GOPATH =&amp;gt; $GOPATH&amp;quot; echo &amp;quot;Type &#39;exit&#39; to remove the GoLang environment variables.</description>
    </item>
    
    <item>
      <title>GoDoc in Local</title>
      <link>https://ismael.casimpan.com/quicktasks-golang/godoc-in-local/</link>
      <pubDate>Fri, 05 Nov 2021 10:05:11 +0800</pubDate>
      
      <guid>https://ismael.casimpan.com/quicktasks-golang/godoc-in-local/</guid>
      <description>In your preferred directory, initialize GOPATH using the short script in Suggested GoLang Init Script.
Then, do the following steps:
 Install godoc  ~$ go install golang.org/x/tools/cmd/godoc@latest go: downloading golang.org/x/tools v0.1.7 go: downloading golang.org/x/sys v0.0.0-20210809222454-d867a43fc93e go: downloading golang.org/x/xerrors v0.0.0-20200804184101-5ec99f83aff1 go: downloading golang.org/x/net v0.0.0-20210805182204-aaa1db679c0d go: downloading github.com/yuin/goldmark v1.4.0 go: downloading golang.org/x/mod v0.4.2  Run godoc  ~$ godoc using module mode; GOMOD=/dev/null  It defaults to using port 6060.
If default port has a conflict, replace it by using parameter -http=:NNNN where NNNN is your port number.</description>
    </item>
    
    <item>
      <title>Golang Module</title>
      <link>https://ismael.casimpan.com/quicktasks-golang/golang-module/</link>
      <pubDate>Mon, 01 Nov 2021 23:05:11 +0800</pubDate>
      
      <guid>https://ismael.casimpan.com/quicktasks-golang/golang-module/</guid>
      <description>~$ mkdir greetings ~$ cd greetings ~$ go mod init example.com/greetings  In a text editor, create greetings.go with the following content:
package greetings import &amp;quot;fmt&amp;quot; // Hello returns a greeting for the named person. func Hello(name string) string { // Return a greeting that embeds the name in a message. message := fmt.Sprintf(&amp;quot;Hi, %v. Welcome!&amp;quot;, name) return message }  Call it from another module
~$ cd .. ~$ mkdir hello ~$ cd hello ~$ go mod init example.</description>
    </item>
    
  </channel>
</rss>
